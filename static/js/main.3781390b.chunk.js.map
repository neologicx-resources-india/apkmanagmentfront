{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","editorState","EditorState","createEmpty","onChange","setState","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kNA8GeA,E,YAZb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,YAAaC,cAAYC,eACvC,EAAKC,SAAW,SAAAH,GAAW,OAAI,EAAKI,SAAS,CAACJ,iBAH7B,E,sEAMjB,OACA,6BAAK,kBAAC,SAAD,CAAQA,YAAaK,KAAKN,MAAMC,YAAaG,SAAUE,KAAKF,gB,GARnDG,IAAMC,WCrFJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3781390b.chunk.js","sourcesContent":["// import React from 'react';\n// import Axios from 'axios';\n\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\n// import Navbar from 'react-bootstrap/Navbar'\n// import Nav from 'react-bootstrap/Nav'\n// import Table from 'react-bootstrap/Table'\n// import Loader from 'react-loader-spinner'\n// import {Editor, EditorState} from 'draft-js'\n// const urlbase = 'http://localhost:3000'\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       isloader: 0,\n//       // isdata:0\n//       tabledata:[],\n//       editorState: EditorState.createEmpty()\n      \n//     };\n//   }\n//  async componentDidMount(){\n//     const url = `${urlbase}/apps/all`\n//     const data=  await Axios.get(url).then(res=>this.setState({tabledata:res.data.data})).catch(err=>console.log(err))\n//     // console.log(data.data)\n    \n//   }\n//   handleupload = (e) => {\n//     e.preventDefault();\n//     this.setState({\n//       isloader: 1\n//     })\n//     const url = `${urlbase}/apps/upload`\n//     const data = new FormData()\n//     data.append('emails', this.Emails.value)\n//     data.append('name', this.Name.value)\n//     data.append('file', this.uploadInput.files[0])\n//     Axios.post(url, data).then(res => { if (res.status === 200) { this.setState({ isloader: 0 }) } }).catch(err => console.log('err', err))\n//   }\n  \n//   render() {\n//     if (this.state.isloader) {\n//       return <div style={{ position: \"absolute\", top: \"48%\", left: \"45%\" }}> <Loader type=\"ThreeDots\" color=\"#somecolor\" height={80} width={80} /></div>\n//     }\n//     // console.log (this.state.tabledata)\n//     const  tableone = this.state.tabledata.length ? <Table striped bordered hover>\n//     <thead>\n//       <tr>\n//         <th>#</th>\n//         <th>Apk Name</th>\n//         <th>Emails</th>\n//         <th>Download</th>\n//       </tr>\n//     </thead>\n//     <tbody>\n//       {this.state.tabledata.map((u,i)=><tr key={i}>\n//         <td>{i+1}</td>\n//         <td>{u.apkversion}</td>\n//         <td>{u.emails}</td>\n//       <td>{u.url}</td>\n//       </tr>)}\n      \n//     </tbody>\n//   </Table>  : ''  \n\n//     return (\n//       <>\n//         <Navbar bg=\"light\" expand=\"lg\">\n//           <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand>\n//           <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n//           <Navbar.Collapse id=\"basic-navbar-nav\">\n//             <Nav className=\"mr-auto\">\n//               <Nav.Link href=\"#home\">Home</Nav.Link>\n//               <Nav.Link href=\"#link\">Link</Nav.Link>\n//             </Nav>\n//           </Navbar.Collapse>\n//         </Navbar>\n\n//         <h1 style={{ padding: \"1% 5% 0 5%\" }}>Upload Apk</h1>\n//         <form onSubmit={this.handleupload} style={{ padding: \"1% 5% 0 5%\" }} method=\"post\">\n//           <input className=\"form-control\" ref={(ref) => { this.Name = ref; }} type=\"name\" placeholder=\"Apk name\" required /><br />\n//           <input className=\"form-control\" ref={(ref) => { this.Emails = ref; }} type=\"emails\" placeholder=\"emails\" required /><br />\n//           <input className=\"form-control\" ref={(ref) => { this.uploadInput = ref; }} type=\"file\" required /><br />\n//           <Editor editorState={this.state.editorState} onChange={this.onChange} />\n//           <button className=\"btn btn-primary\" type=\"submit\">upload</button>\n//         </form>\n//         <br/>\n//         {tableone}\n        \n//       </>\n//     );\n//   }\n// }\n\n// export default App;\nimport React from 'react'\nimport {Editor, EditorState} from 'draft-js';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {editorState: EditorState.createEmpty()};\n    this.onChange = editorState => this.setState({editorState});\n  }\n  render() {\n    return (\n    <div><Editor editorState={this.state.editorState} onChange={this.onChange} /></div>  \n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}